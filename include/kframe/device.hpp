#pragma once
#include"device.h"
#include <util/kdbg.h>
namespace msddk { ;

CDevice::CDevice(DEVICE_TYPE DeviceType,
	const wchar_t *pwszDeviceName,
	ULONG DeviceCharacteristics,
	bool bExclusive,
	ULONG AdditionalDeviceFlags)
{
	if (pwszDeviceName)
		m_DeviceName = pwszDeviceName;

	m_DeviceCharacteristics = DeviceCharacteristics;
	m_pNextDevice = NULL;
	m_bExclusive = bExclusive;
	m_bDeletePending = false;
	m_bInterfaceEnabled = false;
	m_pDeviceObject = NULL;
	m_DeviceType = DeviceType;
	m_pUnderlyingPDO = NULL;
	m_AdditionalDeviceFlags = AdditionalDeviceFlags;
	m_pDriver = NULL;

	memset(&m_InterfaceName, 0, sizeof(m_InterfaceName));
}

CDevice::~CDevice()
{
	DeleteDevice(false);
}

bool CDevice::Valid()
{
	return (m_pDeviceObject != NULL);
}

NTSTATUS CDevice::CreateDevice(CDriver *pDriver, bool bCompleteInitialization/* = true*/, const wchar_t *pwszLinkPath/* = NULL*/)
{
	UNREFERENCED_PARAMETER(pDriver);
	UNREFERENCED_PARAMETER(bCompleteInitialization);
	UNREFERENCED_PARAMETER(pwszLinkPath);

	if (m_DeviceName.IsEmpty() )
	{
		if ( GetDeviceName())
		{
			m_DeviceName = GetDeviceName();
		}
	}

	if ( !pwszLinkPath )
	{
		m_LinkName = pwszLinkPath;
	}
	if ( m_LinkName.IsEmpty() )
	{
		if ( GetDeviceLinkName() )
		{
			m_LinkName = GetDeviceLinkName();
		}
	}

	if (m_pDeviceObject)
		return STATUS_ALREADY_REGISTERED;

	if (!pDriver)
		pDriver = CDriver::GetMainDriver();

	if (!pDriver)
		return STATUS_INTERNAL_ERROR;

	if (pwszLinkPath && !m_DeviceName.IsEmpty())
		return STATUS_OBJECT_NAME_INVALID;


	NTSTATUS st = STATUS_SUCCESS;
	CKStringW FullDevicePath;
	if (m_DeviceName.Length())
	{
		FullDevicePath = L"\\Device\\";
		FullDevicePath += m_DeviceName;
	}

	if (FullDevicePath.IsEmpty())
		m_DeviceCharacteristics |= FILE_AUTOGENERATED_DEVICE_NAME;

	st = IoCreateDevice(pDriver->m_DriverObject,
		sizeof(Extension),
		FullDevicePath,
		m_DeviceType,
		m_DeviceCharacteristics,
		m_bExclusive,
		&m_pDeviceObject);

	if (!NT_SUCCESS(st))
	{
		KdPrint(("Device::CreateDevice(): failed call to IoCreateDevice() (%d)\n", st));
		return st;
	}

	m_pDeviceObject->Flags |= m_AdditionalDeviceFlags;
	Extension *pExt = (Extension *)m_pDeviceObject->DeviceExtension;
	pExt->Signature = Extension::DefaultSignature;
	pExt->pDevice = this;
	if (m_LinkName.Length())
	{
		st = IoCreateSymbolicLink(m_LinkName, FullDevicePath);
		if (!NT_SUCCESS(st))
		{
			//KdPrint(("Device::CreateDevice(): failed call to IoCreateSymbolicLink() (%d)\n", st));
			KdPrint(("Device::CreateDevice(): failed call to IoCreateSymbolicLink() (%wS)\n", MapNTStatus(st)));
			m_LinkName.Empty();
		}
	}

	if (bCompleteInitialization)
		CompleteInitialization();

	m_pDriver = pDriver;
	pDriver->OnDeviceRegistered(this);
	return STATUS_SUCCESS;
}

NTSTATUS CDevice::DeleteDevice(bool FromIRPHandler)
{
	UNREFERENCED_PARAMETER(FromIRPHandler);
	KdPrint(("CDevice::DeleteDevice"));
	m_bDeletePending = true;
	if (m_pDeviceObject)
	{
		KdPrint(("CDevice::DeleteDevice1"));
		if (m_LinkName.Length())
			IoDeleteSymbolicLink(m_LinkName);

		if (m_InterfaceName.Buffer)
		{
			RtlFreeUnicodeString(&m_InterfaceName);
			memset(&m_InterfaceName, 0, sizeof(m_InterfaceName));
		}

		if (m_pNextDevice)
			DetachDevice();

		IoDeleteDevice(m_pDeviceObject);
		m_pDeviceObject = NULL;
	}

	m_bDeletePending = false;
	
	if (m_pDriver)
		m_pDriver->OnDeviceUnregistered(this);

	return STATUS_SUCCESS;
}

NTSTATUS CDevice::DetachDevice()
{
	if (!m_pDeviceObject)
		return STATUS_INVALID_DEVICE_STATE;

	if (!m_pNextDevice)
		return STATUS_INVALID_DEVICE_STATE;

	m_pUnderlyingPDO = NULL;
	IoDetachDevice(m_pNextDevice);
	m_pNextDevice = NULL;
	return STATUS_SUCCESS;
}
void CDevice::CompleteInitialization()
{
	if (m_pDeviceObject)
		m_pDeviceObject->Flags &= ~DO_DEVICE_INITIALIZING;
}

NTSTATUS CDevice::RegisterInterface(IN CONST GUID *pGuid, IN PCUNICODE_STRING ReferenceString /*= NULL*/)
{
	if (!pGuid)
		return STATUS_INVALID_PARAMETER;
	if (!m_pUnderlyingPDO || m_InterfaceName.Buffer)
		return STATUS_INVALID_DEVICE_STATE;
	return IoRegisterDeviceInterface(m_pUnderlyingPDO, pGuid, (PUNICODE_STRING)ReferenceString, &m_InterfaceName);
}

NTSTATUS CDevice::EnableInterface()
{
	if (!m_InterfaceName.Buffer)
		return STATUS_INVALID_DEVICE_STATE;
	NTSTATUS st = IoSetDeviceInterfaceState(&m_InterfaceName, TRUE);
	if (NT_SUCCESS(st))
		m_bInterfaceEnabled = true;
	return st;
}

NTSTATUS CDevice::DisableInterface()
{
	if (!m_InterfaceName.Buffer)
		return STATUS_INVALID_DEVICE_STATE;
	NTSTATUS st = IoSetDeviceInterfaceState(&m_InterfaceName, FALSE);
	if (NT_SUCCESS(st))
		m_bInterfaceEnabled = false;
	return st;
}

NTSTATUS CDevice::AttachToDeviceStack(PDEVICE_OBJECT DeviceObject)
{
	if (!m_pDeviceObject)
		return STATUS_INVALID_DEVICE_STATE;
	if (!(m_pDeviceObject->Flags & DO_DEVICE_INITIALIZING))
		return STATUS_INVALID_DEVICE_STATE;
	if (m_pNextDevice)
		return STATUS_ALREADY_REGISTERED;
	m_pNextDevice = IoAttachDeviceToDeviceStack(m_pDeviceObject, DeviceObject);
	if (!m_pNextDevice)
		return STATUS_INVALID_DEVICE_STATE;
	m_pUnderlyingPDO = DeviceObject;
	return STATUS_SUCCESS;
}

NTSTATUS CDevice::AttachToDevice(CKStringW DevicePath)
{
	if (!m_pDeviceObject)
		return STATUS_INVALID_DEVICE_STATE;
	if (m_pNextDevice)
		return STATUS_ALREADY_REGISTERED;
	NTSTATUS st = IoAttachDevice(m_pDeviceObject, DevicePath, &m_pNextDevice);
	if (!NT_SUCCESS(st))
		return st;
	if (!m_pNextDevice)
		return STATUS_INVALID_DEVICE_STATE;
	m_pUnderlyingPDO = m_pNextDevice;
	return STATUS_SUCCESS;
}

LPCWSTR CDevice::GetDeviceName()
{
	return NULL;
}

LPCWSTR CDevice::GetDeviceLinkName()
{
	return NULL;
}
};
